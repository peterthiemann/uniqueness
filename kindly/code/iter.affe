## Mutable Iteration

type ('a : 'k) larray : lin
val length : \ ('a:_). &(_, 'a larray) -> int

val get : \ ('a:un) . &(_, 'a larray) -> int -> 'a
val get_borrow : \ 'r ('a:_) . &!('r, 'a larray) -> int -> &!('r, 'a)
val get_iborrow : \ 'r ('a:_) . &('r, 'a larray) -> int -> &('r, 'a)

val with_borrow : \ 'r 'q ('a:_) ('b:'q) . &('r, 'a larray) -> (&('r, 'a) -> 'b) -> 'b

val geq : int -> int -> bool

let iter_mut_core (f, a, i) =
	f (get_borrow a i)

let iter_mut (f, a) =
  let rec iter_mut_helper (f, a, i) =
    match geq i 0 with { 
    | True -> let () = iter_mut_core (f, &&!a, i)
              in iter_mut_helper (f, &&!a, i - 1)
    | False ->
       ()
    }
  in let l = length &&a
  in iter_mut_helper (f, a, l - 1)

### folding over a borrow

let bfold f a z =
  let rec bfold_helper acc i =
    match geq i 0 with {
    | True ->
      bfold_helper (f (get_iborrow a i) acc) (i - 1)
    | False ->
      acc
    }
  in bfold_helper z (length a - 1)

let bfx a =
  bfold (fun b x -> b) a

### the type of these two functions should be similar (if not equal) to the type of bfold

let bf0 f a z =
  match geq (length a) 1 with {
  | True ->
    f (get_iborrow a 1) (f (get_iborrow a 0) z)
  | False ->
    z
  }

## all reborrows are needed in bf1!

let bf1 f a z =
  match geq (length &&a) 1 with {
  | True ->
    f (get_iborrow &&a 1) (f (get_iborrow &&a 0) z)
  | False ->
    z
  }
