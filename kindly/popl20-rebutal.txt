# Reviewer A

- How is proper nesting of regions enforced, for both the type system and region inference in Appendix A?  And for the example I asked about above ( $\{|\ldots\{|\ldots|\}^2|\}^3$ )? Or does the paper simply give a nesting intuition that's not necessary because the indices don't actually matter for soundness?

We assume that region annotations are handled out of the type system, through
our automatic annotation phase provided in Appendix A.
Unfortunately, the rules provided have a typo: The recursive
call in "Rewrite-Region" should be $n+1$.
This pass is then completely deterministic (which solves principality concerns)
and ensures that indices grow as regions are nested (which rules out all the given
problematic examples).
This is sufficient since there is no
way to hide the level of a borrow and smuggle it pass a region boundary.
If that was the case, for instance with existential types, we would require a
more sophisticated region system with abstract variables, as proposed.

For clarity we tried to separate both concerns, but we agree
such assumptions should be made clearer and will improve
the explanations of regions in consequence.

- Please explain why/whether Theorem F.2's statement properly enforces linearity

Peter??

# Reviewer B

* Modules

Affe's usage of subsumption also interacts with type abstraction and modules
For instance, the `File.t` type presented in Figure 1a could be implemented
as a file descriptor (i.e., an integer), which is unrestricted. Subsumption
then allow the unrestricted type to be exposed as affine.
Such mechanism allow programmers to implement their own primitives on
abstract types.
As usual with type-level programming, they must also ensure
the soundness of such primitives
Modules and subsumption are used similarly in Alms, and allow
to emulate the `unsafe` construct in Rust.

# Reviewer C

* Simplification and subkinding

Affe's usage of subsumption allow to simplify many type signatures
without loosing expressiveness.
In particular, as highlighted in section 1.1, the compose function

    let compose f g x = f (g x)
    # compose : (k <= k1) => (b -k-> c) -> (a -k1-> b) -k-> (a -k1-> c)

allows `f` linear and `g` affine.
Since affine is a subkind of linear, `g`'s multiplicity can be subsummed to
linear, both k and k1 are instanciated to linear, and the application
is accepted. This follow the treatement of leaf/structural subtyping in HM
languages.

 * Regions and borrowing

Session types naturally lends themselves to functional programming, while
borrows are more useful for imperative programming.
As shown in Section 2.3, the goal of Affe is precisely to support both style, allowing the programmer to chose the most appropriate one for the task at hand.
The session type example aims to demonstrate that Affe's type inference
handles functional code elegantely, with no extra annotations.

To work on borrow of channels, one would requires appropriate primitive operations.
Typed imperative manipulations of channels would require features such as type states
which are notoriously incompatible with type inference. However,
there are some operations which are easily typable in Affe:
- Operations extracting metadata (IP, bytes sent, ...) on shared borrows
  get_address: &(_ channel) -> ip_address
- Operations preserving the state of exclusive borrows
  For instance, ???Pfenning??? proposes a cycle operator which we could model as follow:
  cycle : &!('a channel) -> ('a channel -> 'a channel) -> unit

Since the full channel can not be used while a borrow is active, such
operations are sound.


* Formalization

We disagree that the formalization is incomplete.
In particular, the handling of the range
of borrows is detailed in Section 3.2.4 on regions.
Furthermore, the lack of deconstruction form for borrows of abstract types is
intended: only the appropriate primitives can act on borrows, since the semantic
of borrow is specific to a given abstract type: For instance
`read_line : &file -> string` allows data-races,
while `&!file -> string` doesn't.

For space concerns and because the current articled focused on linearity, borrowing
and inference, we decided not to detail the handling of matching on pairs.
We agree
that such aspect is important, and will extend it if the article is accepted.

* Related work

????

# Reviewer D

* Partial inference and GADT

Our opinion is that, even if a language does not admit full type inference,
there should be an explicitely defined core language which does.
This allow the programmer to know when to add the type annotations.
In particular, it is possible (and desirable) to extend Affe with existential types
by requiring type annotations, similarly to Alms.
The results we present nevertheless garantee that when existentials are not used,
full type inference is supported.
